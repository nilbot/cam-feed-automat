<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:prism="http://www.codeplex.com/prism"
    xmlns:view="clr-namespace:Feeder.View"
    xmlns:controls="clr-namespace:Feeder.Common.Controls"
    xmlns:timber="clr-namespace:Feeder.Common.Timber" xmlns:model="clr-namespace:Feeder.Model"

    mc:Ignorable="d" x:Class="Feeder.View.MainView"
    Title="PushCapFeeder Monitor"
    DataContext="{Binding Main, Source={StaticResource Locator}}"
    d:DesignWidth="605" d:DesignHeight="393">
    <Window.Resources>
        <Style TargetType="ItemsControl" x:Key="LogViewerStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <ScrollViewer CanContentScroll="True">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel IsItemsHost="True" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate DataType="{x:Type timber:LogEntry}">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="Index" Width="Auto" />
                    <ColumnDefinition SharedSizeGroup="Date" Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>

                <TextBox Text="{Binding DateTimeString, Mode=OneWay}" Grid.Column="0"
                         FontWeight="Bold" Margin="5,0,5,0" IsReadOnly="True" />

                <TextBox Text="{Binding Module}" Grid.Column="1"
                         FontWeight="Bold" Margin="0,0,2,0" IsReadOnly="True" />

                <TextBox Text="{Binding Message}" Grid.Column="2"
                         TextWrapping="Wrap" IsReadOnly="True" />
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type timber:CollapsibleLogEntry}">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="Index" Width="Auto" />
                    <ColumnDefinition SharedSizeGroup="Date" Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <TextBox Text="{Binding DateTimeString, Mode=OneWay}" Grid.Column="0"
                         FontWeight="Bold" Margin="5,0,5,0" />

                <TextBox Text="{Binding Module}" Grid.Column="1"
                         FontWeight="Bold" Margin="0,0,2,0" />

                <TextBox Text="{Binding Message}" Grid.Column="2"
                         TextWrapping="Wrap" />

                <ToggleButton x:Name="Expander" Grid.Row="1" Grid.Column="0"
                              VerticalAlignment="Top" Content="+" HorizontalAlignment="Right" />

                <ItemsControl ItemsSource="{Binding Contents}" Style="{StaticResource LogViewerStyle}"
                              Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"
                              x:Name="Contents" Visibility="Collapsed" />

            </Grid>
            <DataTemplate.Triggers>
                <Trigger SourceName="Expander" Property="IsChecked" Value="True">
                    <Setter TargetName="Contents" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Expander" Property="Content" Value="-" />
                </Trigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <Style TargetType="{x:Type ListBox}" x:Key="CameraMonitorStyle">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Border BorderBrush="Sienna" BorderThickness="3" Margin="6">
                            <Image Width="{Binding Path=Width}" Height="{Binding Path=Height}" Source="{Binding Path=Device.BitmapSource}" MinWidth="320" MinHeight="240" />
                        </Border>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <WrapPanel />
                    </ItemsPanelTemplate> 
                </Setter.Value>
            </Setter>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        </Style>
        
        
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="472*" />
            <ColumnDefinition Width="125*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*" />
            <RowDefinition Height="6*" />
        </Grid.RowDefinitions>


        <Grid Background="White">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="43*" />
                <ColumnDefinition Width="165*" />
                <ColumnDefinition Width="43*" />
                <ColumnDefinition Width="165*" />
                <ColumnDefinition Width="43*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="54*" />
                

            </Grid.RowDefinitions>
            
            <StackPanel Grid.Column="1" Orientation="Vertical" VerticalAlignment="Bottom">
                <Button Content="Refresh Connected Camera" Command="{Binding GetCameraUuids}" Margin="0,0,0,16"  />
                <Button Content="Change Camera Parameter" VerticalAlignment="Center" FontSize="16"
                       FontWeight="Bold" MinHeight="42" >
                    
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <prism:InvokeCommandAction Command="{Binding RaiseSetParameterDetailAction}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
            </StackPanel>
            <StackPanel Grid.Column="3" Orientation="Horizontal">
                <!--<Button Command="{Binding RollTheCameras}"
                    Content="{Binding CameraMissionControlButtonText}" Background="{Binding CameraMissionControlButtonBackground}"
                     FontWeight="Bold" />-->
                <Button Content="FireRun" Command="{Binding FireRun}" />
                <Button Content="FireStop" Command="{Binding FireStop}" />
                <Button Content="FireRecord" Command="{Binding FireRecord}" />
                <Button Content="Connect Beckhoff" Command="{Binding ConnectBeckhoff}" />
                
            </StackPanel>



        </Grid>

        <ListBox Grid.Row="1" ItemsSource="{Binding CameraMonitors}" Style="{StaticResource CameraMonitorStyle}"/>
            
        
        <DockPanel Grid.Column="2" Grid.RowSpan="2">
            <DockPanel Dock="Top">
                <CheckBox VerticalAlignment="Center" Content="Show Info" IsChecked="{Binding LoggerIncludeInfo}"   DockPanel.Dock="Left"></CheckBox>
                <Button Content="Clear All Logs" Command="{Binding ClearAllLogEntries}" />
            </DockPanel>
            <Button Content="Save All Logs" Command="{Binding SaveAllLogEntries}" DockPanel.Dock="Bottom" />
            <TextBox Text="{Binding LogEntries.Count, StringFormat='{}{0} Items', Mode=OneWay}" IsReadOnly="True"
                     DockPanel.Dock="Top" />

            <ItemsControl ItemsSource="{Binding LogEntries}" Style="{StaticResource LogViewerStyle}">
                <ItemsControl.Template>
                    <ControlTemplate>
                        <ScrollViewer CanContentScroll="True">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </ControlTemplate>
                </ItemsControl.Template>
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel IsItemsHost="True" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </DockPanel>

    </Grid>


    <i:Interaction.Triggers>
        <prism:InteractionRequestTrigger SourceObject="{Binding ErrorNotificationRequest, Mode=OneWay}">
            <!-- This PopupWindowAction does not have a custom view defined, therefore it will try to use a DefaultConfirmationWindow -->
            <!-- which is a window used by default by Prism to shown IConfirmation implementations -->
            <!-- That window will be show as a modal dialog and centered over this window -->
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True" />
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger SourceObject="{Binding MessageNotificationRequest, Mode=OneWay}">
            <!-- This PopupWindowAction does not have a custom view defined, therefore it will try to use a DefaultConfirmationWindow -->
            <!-- which is a window used by default by Prism to shown IConfirmation implementations -->
            <!-- That window will be show as a modal dialog and centered over this window -->
            <prism:PopupWindowAction IsModal="True" CenterOverAssociatedObject="True" />
        </prism:InteractionRequestTrigger>
        <prism:InteractionRequestTrigger
            SourceObject="{Binding ParameterDetailSetupNotificationRequest, Mode=OneWay}">
            <!-- This PopupWindowAction has a custom view defined. When this action is executed the view will be shown inside a new window -->
            <!-- Take into account that the view and its view model are created only once and will be reused each time the action is executed -->
            <prism:PopupWindowAction>
                <prism:PopupWindowAction.WindowContent>
                    <view:ParameterDetailsDialogView />
                </prism:PopupWindowAction.WindowContent>
            </prism:PopupWindowAction>
        </prism:InteractionRequestTrigger>
    </i:Interaction.Triggers>
</Window>